---
import Hr from "./Hr.astro";
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import { SITE } from "@/config";

export type Props = object;

// Keep for potential future use
void Astro.url;
---

<header>
  <a
    id="skip-to-content"
    href="#main-content"
    class="absolute start-16 -top-full z-50 bg-background px-3 py-2 text-accent backdrop-blur-lg transition-all focus:top-4"
  >
    Skip to content
  </a>
  <div
    id="nav-container"
    class="mx-auto flex max-w-app flex-col items-center justify-between sm:flex-row"
  >
    <div
      id="top-nav-wrap"
      class="relative flex w-full items-baseline justify-between bg-background p-4 sm:items-center sm:py-6"
    >
      <a
        href="/"
        class="absolute py-1 text-xl leading-8 font-semibold whitespace-nowrap sm:static sm:my-auto sm:text-2xl sm:leading-none"
      >
        {SITE.title}
      </a>
      <nav
        id="nav-menu"
        class="flex w-full flex-row items-center justify-end sm:ms-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0"
      >
        <button
          id="menu-btn"
          class="focus-outline self-end p-2 sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconX id="close-icon" class="hidden" />
          <IconMenuDeep id="menu-icon" />
        </button>
        <ul
          id="menu-items"
          class:list={[
            "mt-4 grid w-56 grid-cols-1 place-content-start gap-1",
            "[&>li>a]:block [&>li>a]:px-4 [&>li>a]:py-3 [&>li>a]:text-start [&>li>a]:font-medium [&>li>a]:hover:text-accent",
            "hidden",
            "sm:hidden",
          ]}
        >
        </ul>

        {
          SITE.lightAndDarkMode && (
            <button
              id="theme-btn"
              class="focus-outline relative ms-2 size-12 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
              title="Toggles light & dark"
              aria-label="auto"
              aria-live="polite"
            >
              <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
              <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
            </button>
          )
        }
      </nav>
    </div>
  </div>
  <Hr />
</header>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn");
    const menuItems = document.querySelector("#menu-items");
    const menuIcon = document.querySelector("#menu-icon");
    const closeIcon = document.querySelector("#close-icon");

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    menuBtn.addEventListener("click", () => {
      const openMenu = menuBtn.getAttribute("aria-expanded") === "true";

      menuBtn.setAttribute("aria-expanded", openMenu ? "false" : "true");
      menuBtn.setAttribute("aria-label", openMenu ? "Open Menu" : "Close Menu");

      menuItems.classList.toggle("hidden");
      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);

  // Populate mobile menu with TOC items on post pages
  function initMobileTocMenu() {
    const menuBtn = document.querySelector<HTMLButtonElement>("#menu-btn");
    const menuItems = document.querySelector<HTMLUListElement>("#menu-items");
    if (!menuBtn || !menuItems) return;

    const headings = Array.from(
      document.querySelectorAll<HTMLElement>(
        "article h2, article h3, article h4, article h5, article h6"
      )
    );
    if (headings.length === 0) {
      menuItems.innerHTML = "";
      menuBtn.classList.add("hidden");
      return;
    }
    menuBtn.classList.remove("hidden");

    // Ensure instant jump, not smooth
    document.documentElement.style.scrollBehavior = "auto";

    // Build items once per page swap
    menuItems.innerHTML = "";
    for (const heading of headings) {
      if (!heading.id) continue;
      const li = document.createElement("li");
      const a = document.createElement("a");
      a.href = `#${heading.id}`;
      a.textContent = heading.textContent || heading.id;
      a.addEventListener("click", e => {
        e.preventDefault();
        const target = document.getElementById(heading.id);
        // Close the menu immediately
        menuItems.classList.add("hidden");
        const menuIcon = document.querySelector("#menu-icon");
        const closeIcon = document.querySelector("#close-icon");
        menuIcon?.classList.remove("hidden");
        closeIcon?.classList.add("hidden");
        menuBtn.setAttribute("aria-expanded", "false");
        if (target) {
          target.scrollIntoView({ behavior: "auto", block: "start" });
          history.replaceState(null, "", `#${heading.id}`);
        } else {
          location.hash = `#${heading.id}`;
        }
      });
      li.appendChild(a);
      menuItems.appendChild(li);
    }
  }

  initMobileTocMenu();
  document.addEventListener("astro:after-swap", initMobileTocMenu);
</script>
