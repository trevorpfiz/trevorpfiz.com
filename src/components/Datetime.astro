---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import IconCalendar from "@/assets/icons/IconCalendar.svg";
import { SITE } from "@/config";

dayjs.extend(utc);
dayjs.extend(timezone);

export interface Props {
  class?: string;
  size?: "sm" | "base" | "lg";
  timezone: string | undefined;
  pubDatetime: string | Date;
  modDatetime: string | Date | undefined | null;
  showIcon?: boolean;
  showUpdatedLabel?: boolean;
  preferPublished?: boolean;
}

const {
  pubDatetime,
  modDatetime,
  size = "base",
  class: className = "",
  timezone: postTimezone,
  showIcon = true,
  showUpdatedLabel = true,
  preferPublished = false,
} = Astro.props;

/* ========== Formatted Datetime ========== */
const isModified = !preferPublished && modDatetime && modDatetime > pubDatetime;

const datetime = dayjs(
  preferPublished ? pubDatetime : isModified ? modDatetime : pubDatetime
).tz(postTimezone || SITE.timezone);

const date = datetime.format("MMMM D, YYYY"); // e.g., 'March 22, 2025'
---

<div class:list={["flex items-center gap-x-2 opacity-60", className]}>
  {
    showIcon && (
      <IconCalendar
        class:list={[
          "inline-block size-6 min-w-[1.375rem]",
          { "scale-90": size === "sm" },
        ]}
      />
    )
  }
  {
    isModified && showUpdatedLabel && (
      <span
        class:list={[
          size === "sm" && "text-sm",
          size === "base" && "text-base",
          size === "lg" && "text-lg",
        ]}
      >
        Updated:
      </span>
    )
  }
  <time
    class:list={[
      size === "sm" && "text-sm",
      size === "base" && "text-base",
      size === "lg" && "text-lg",
    ]}
    datetime={datetime.toISOString()}>{date}</time
  >
</div>
